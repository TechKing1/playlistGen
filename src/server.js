import express from 'express';
import axios from 'axios';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { Buffer } from 'buffer';
import path from 'path';
import { fileURLToPath } from 'url';
import querystring from 'querystring';

// Fix __dirname for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = 3000;

// Serve static files from the "public" directory
app.use(express.static(path.join(__dirname, '../pub')));

// Spotify API credentials
const CLIENT_ID = 'b7d271a11eed43778f23b3cb361062d4';
const CLIENT_SECRET = 'db878384f1654a06abb903f928e299ec';
const REDIRECT_URI = 'http://localhost:3000/callback'; // Must match Spotify Developer Dashboard
let accessToken = '';
let refreshToken = '';

// Gemini API setup
const genAI = new GoogleGenerativeAI('AIzaSyBwYzREVVm7_iobOBRjpXA1qG8G5_PVXdQ');

// Spotify OAuth: Redirect user to Spotify authorization page
app.get('/login', (req, res) => {
  const scope = 'playlist-modify-public playlist-modify-private';
  res.redirect(
    `https://accounts.spotify.com/authorize?${querystring.stringify({
      response_type: 'code',
      client_id: CLIENT_ID,
      scope: scope,
      redirect_uri: REDIRECT_URI,
    })}`
  );
});

// Spotify OAuth: Handle callback and get access token
app.get('/callback', async (req, res) => {
  const code = req.query.code || null;

  try {
    const response = await axios.post(
      'https://accounts.spotify.com/api/token',
      querystring.stringify({
        grant_type: 'authorization_code',
        code: code,
        redirect_uri: REDIRECT_URI,
      }),
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': `Basic ${Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64')}`,
        },
      }
    );

    accessToken = response.data.access_token;
    refreshToken = response.data.refresh_token;
    res.redirect('/'); // Redirect to the homepage after login
  } catch (error) {
    console.error('Error during Spotify OAuth callback:', error.message);
    res.status(500).send('Error during Spotify OAuth callback.');
  }
});

// Generate playlist query using Gemini
const generatePlaylistQuery = async (courses, mood) => {
  try {
    const model = genAI.getGenerativeModel({ model: 'gemini-pro' });
    const prompt = `Generate a Spotify playlist query for studying ${courses.join(', ')} with a ${mood} mood. Examples: "lo-fi study beats", "classical focus music".`;
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const query = response.text().replace(/"/g, '').trim(); // Remove quotes and trim whitespace
    console.log('Generated playlist query:', query);
    return query;
  } catch (error) {
    console.error('Error generating playlist query:', error.message);
    return null;
  }
};

// Create a Spotify playlist and add tracks
const createSpotifyPlaylist = async (userId, playlistName, tracks) => {
  try {
    // Create a new playlist
    const playlistResponse = await axios.post(
      `https://api.spotify.com/v1/users/${userId}/playlists`,
      {
        name: playlistName,
        description: 'Generated by Study Playlist Generator',
        public: false,
      },
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
      }
    );

    const playlistId = playlistResponse.data.id;

    // Add tracks to the playlist
    await axios.post(
      `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
      {
        uris: tracks,
      },
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
      }
    );

    return playlistResponse.data.external_urls.spotify; // Return the playlist URL
  } catch (error) {
    console.error('Error creating Spotify playlist:', error.response ? error.response.data : error.message);
    return null;
  }
};

// Handle playlist generation request
app.get('/generate-playlist', async (req, res) => {
  const { courses, mood } = req.query;
  const courseList = courses.split(',');

  // Generate playlist query using Gemini
  const query = await generatePlaylistQuery(courseList, mood);
  if (!query) {
    return res.status(500).send('Failed to generate playlist query.');
  }

  // Search for tracks on Spotify
  const tracksResponse = await axios.get(
    `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=track`,
    {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
      },
    }
  );

  const tracks = tracksResponse.data.tracks.items.map(track => track.uri);

  // Create a Spotify playlist
  const playlistUrl = await createSpotifyPlaylist('user_id_here', `Study Playlist: ${query}`, tracks);
  if (!playlistUrl) {
    return res.status(500).send('Failed to create Spotify playlist.');
  }

  res.send(`Playlist created successfully! <a href="${playlistUrl}" target="_blank">Open Playlist</a>`);
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});